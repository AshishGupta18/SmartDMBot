{
  "object type": "INTF",
  "description": "ABAP Interfaces define method signatures without implementation and are used to achieve multiple inheritance and decouple components. They are used extensively in object-oriented programming within SAP.",
  "tcode": ["SE24", "SE80"],
  "tool_used": [
    {
      "code": "SE24",
      "purpose": "Used to create, view, or modify ABAP classes and interfaces."
    },
    {
      "code": "SE80",
      "purpose": "Object Navigator — provides a comprehensive environment to access, create, and manage all ABAP development objects."
    },
    {
      "code": "SE03",
      "purpose": "Used to analyze and search repository objects and transport requests by object type and name."
    },
    {
      "tool": "MELD or similar file diff tool",
      "purpose": "Used for comparing interface method signatures between source and target systems."
    }
  ],
  "retrofit_process": {
    "overview": "Interface changes are not always captured properly in TMS. Use manual comparison and transport history checks to ensure safe import or manual retrofit.",
    "how_it_works": "Interfaces are reusable and implemented by one or more ABAP classes. During retrofit, changes to interface signatures or newly created interfaces must be manually applied in the target system.",
    "cases": [
      {
        "name": "Case 1 - Existing Interface, Changed in Source",
        "steps": [
          "Use SE03 to search by object type INTF and object name.",
          "Note transport number and sort transports by date.",
          "Confirm if the last transport includes source changes.",
          "Use transaction SE24 in target system to manually apply changes."
        ]
      },
      {
        "name": "Case 2 - New Interface",
        "steps": [
          "Check SE03 in target to confirm it doesn't exist.",
          "If missing, create the interface manually using SE24.",
          "Refer to source system for method names, parameters, types.",
          "Create methods with same signatures.",
          "Save and activate."
        ]
      }
    ],
    "structured_steps": {
      "create_new_interface": [
        "Go to SE24",
        "Enter interface name and choose 'Create'",
        "Fill in description and package",
        "Add methods with same names and signatures as in source",
        "Activate interface"
      ],
      "check_transport_status": [
        "Go to SE03",
        "Input Object Type = INTF and Object Name",
        "Execute and check transport requests",
        "Sort by date and compare with source transport",
        "If latest TR matches source, it's safe to import"
      ]
    },
    "status_types": [
      "Retrofit Done – Interface manually adjusted in target",
      "No Action - Identical"
    ],
    "debug_workaround": {
      "description": "Not applicable for interface changes."
    }
  },
  "comparison notes": {
    "object_type": "Interface (INTF)",
    "tcode": "SE03",
    "method": "Compare source and target using file diff tools like MELD"
  },
  "common_errors": [
    {
      "error": "Interface not found in target",
      "solution": "Manually create the interface using SE24 with the same methods and signatures"
    },
    {
      "error": "Transport mismatch or missing object",
      "solution": "Use SE03 to check latest TR in source and compare against target"
    }
  ],
  "best_practices": [
    "Always verify the latest transport using SE03 before retrofit.",
    "Use MELD or similar file comparison tools to identify changes clearly.",
    "Keep method names, parameters, and types exactly same across systems.",
    "Avoid unnecessary activation or release if source object isn’t released."
  ],
  "chatbot_responses": {
    "example": {
      "interface": "/PRI/IF_THING_MANAGER",
      "method": {
        "name": "GET_THINGS",
        "parameters": [
          { "name": "IV_CREATE_IF_NOT_EXISTS", "type": "ABAP_BOOL", "optional": true },
          { "name": "IT_THING_KEY", "type": "/PRI/TT_THING_KEY" },
          { "name": "IT_THING", "type": "/PRI/TT_THING" },
          { "name": "ET_THING", "type": "/PRI/TT_THING" }
        ]
      },
      "used_for": "Managing and fetching 'thing' objects in custom framework",
      "status": "Retrofit Done – Interface manually adjusted in target system"
    },
    "structure": {
      "tabs": [
        {
          "name": "Public Section",
          "description": "Defines all publicly accessible components like methods and constants."
        },
        {
          "name": "Methods",
          "description": "Method signatures (without implementation) are defined here."
        },
        {
          "name": "Attributes",
          "description": "Optional fields for constants or references used in the interface."
        }
      ]
    },
    "used_in": ["Enhancements", "Custom Frameworks", "Object-Oriented ABAP", "Business Object Interfaces"],
    "tables": [
      {
        "name": "TADIR",
        "description": "Stores repository object information including interfaces"
      },
      {
        "name": "E071",
        "description": "Stores objects in transport requests"
      }
    ],
    "things_to_remember": [
      "Interface changes may not be captured correctly in ToC.",
      "Always cross-verify with transport history.",
      "Use proper object type filter (INTF) in SE03.",
      "Manual method comparison is crucial for retrofit accuracy."
    ],
    "followup_questions": [
      "How to check if interface exists in the target?",
      "What is the safest way to retrofit an interface?",
      "Which transaction shows the transport history?",
      "Why is MELD used in interface retrofit?",
      "Can interfaces be transported using ToC?",
      "What is the difference between interface and class in ABAP?",
      "How to know if the interface is safe to import?"
    ]
  }
}
